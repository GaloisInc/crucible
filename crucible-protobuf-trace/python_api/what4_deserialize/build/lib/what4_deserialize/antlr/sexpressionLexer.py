# Generated from ./sexpression.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,8,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,4,0,27,8,0,
        11,0,12,0,28,1,0,1,0,1,1,3,1,34,8,1,1,1,4,1,37,8,1,11,1,12,1,38,
        1,1,1,1,4,1,43,8,1,11,1,12,1,44,3,1,47,8,1,1,2,1,2,1,3,1,3,1,3,1,
        3,3,3,55,8,3,1,3,4,3,58,8,3,11,3,12,3,59,1,3,1,3,1,3,1,3,3,3,66,
        8,3,1,3,4,3,69,8,3,11,3,12,3,70,3,3,73,8,3,1,4,1,4,1,4,5,4,78,8,
        4,10,4,12,4,81,9,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,5,7,91,8,7,10,
        7,12,7,94,9,7,1,7,3,7,97,8,7,1,7,1,7,1,8,3,8,102,8,8,1,9,1,9,1,10,
        1,10,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,0,19,
        0,21,0,23,0,1,0,6,3,0,9,10,13,13,32,32,2,0,43,43,45,45,2,0,61,61,
        95,95,2,0,10,10,13,13,5,0,42,43,45,47,65,90,95,95,97,122,3,0,48,
        57,65,70,97,102,118,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,26,1,0,
        0,0,3,33,1,0,0,0,5,48,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,82,1,
        0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,17,101,1,0,0,0,19,103,1,0,0,0,
        21,105,1,0,0,0,23,107,1,0,0,0,25,27,7,0,0,0,26,25,1,0,0,0,27,28,
        1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,30,1,0,0,0,30,31,6,0,0,0,
        31,2,1,0,0,0,32,34,7,1,0,0,33,32,1,0,0,0,33,34,1,0,0,0,34,36,1,0,
        0,0,35,37,3,19,9,0,36,35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,
        39,1,0,0,0,39,46,1,0,0,0,40,42,5,46,0,0,41,43,3,19,9,0,42,41,1,0,
        0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,46,40,
        1,0,0,0,46,47,1,0,0,0,47,4,1,0,0,0,48,49,7,2,0,0,49,6,1,0,0,0,50,
        51,5,35,0,0,51,55,5,98,0,0,52,53,5,35,0,0,53,55,5,66,0,0,54,50,1,
        0,0,0,54,52,1,0,0,0,55,57,1,0,0,0,56,58,3,23,11,0,57,56,1,0,0,0,
        58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,73,1,0,0,0,61,62,5,
        35,0,0,62,66,5,120,0,0,63,64,5,35,0,0,64,66,5,88,0,0,65,61,1,0,0,
        0,65,63,1,0,0,0,66,68,1,0,0,0,67,69,3,21,10,0,68,67,1,0,0,0,69,70,
        1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,54,1,0,0,0,
        72,65,1,0,0,0,73,8,1,0,0,0,74,79,3,17,8,0,75,78,3,17,8,0,76,78,3,
        19,9,0,77,75,1,0,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,
        80,1,0,0,0,80,10,1,0,0,0,81,79,1,0,0,0,82,83,5,40,0,0,83,12,1,0,
        0,0,84,85,5,41,0,0,85,14,1,0,0,0,86,87,5,59,0,0,87,88,5,59,0,0,88,
        92,1,0,0,0,89,91,8,3,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,
        0,92,93,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,95,97,5,13,0,0,96,95,
        1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,99,5,10,0,0,99,16,1,0,0,0,
        100,102,7,4,0,0,101,100,1,0,0,0,102,18,1,0,0,0,103,104,2,48,57,0,
        104,20,1,0,0,0,105,106,7,5,0,0,106,22,1,0,0,0,107,108,2,48,49,0,
        108,24,1,0,0,0,16,0,28,33,38,44,46,54,59,65,70,72,77,79,92,96,101,
        1,6,0,0
    ]

class sexpressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    NUMBER = 2
    OPERATOR = 3
    BITVECTOR_CONST = 4
    SYMBOL = 5
    LPAREN = 6
    RPAREN = 7
    COMMENT = 8

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "NUMBER", "OPERATOR", "BITVECTOR_CONST", "SYMBOL", 
            "LPAREN", "RPAREN", "COMMENT" ]

    ruleNames = [ "WHITESPACE", "NUMBER", "OPERATOR", "BITVECTOR_CONST", 
                  "SYMBOL", "LPAREN", "RPAREN", "COMMENT", "SYMBOL_START", 
                  "DIGIT", "HEX_DIGIT", "BIN_DIGIT" ]

    grammarFileName = "sexpression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


