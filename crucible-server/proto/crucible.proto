// syntax = "proto2";

package crucible;

option java_package = "com.galois.crucible.proto";
option java_outer_classname = "Protos";
option optimize_for = SPEED;

////////////////////////////////////////////////////////////////////////
// Messages relating to the server startup handshake.  In this phase
// the client requests to start the server using a specific backend.
// The server responds to indicate all is well; or returns an error.

message HandShakeRequest {
  optional Backend backend = 1;
}

message HandShakeResponse {
  optional HandShakeCode code = 1;
  optional string message = 2;
}

enum Backend {
  SimpleBackend = 0;
  SAWBackend = 1;
}

enum HandShakeCode {
  HandShakeOK = 0;
  HandShakeError = 1;
}

////////////////////////////////////////////////////////////////////////
// Declarations for issuing requests to simulator when nothing is
// running.

// A code to identify a request to the simulator.
// This is used exclusively within Request messages, and specific codes will
// require some of those fields to be populated.
enum RequestCode {
  // Placeholder used if request code could not be parsed from a message.
  UnknownMessage = 0;

  // Terminate the simulator (no additional information needed, and no response returned).
  KillSimulator = 1;

  // Create a new handle with the handle info added in the handle.
  // This message expects that the Request.handle field is populated.
  //
  // The server should return a RegisterHandleResponse message back to
  // the client after this occurs.
  RegisterHandle = 2;

  // Request code for associating a function handle with the given
  // Crucible CFG for symbolic simulation.
  // The first Request.cfg contains information about the cfg used.
  // This Request has no return value.
  UseCFG = 4;

  // Have Crucible callback to Java to support this function.
  // Request.index contains the index of the handle to use.
  UseOverride = 5;

  // Request code for running a function with a given list of arguments
  // (in Request.argument), and getting the result.  The first argument is
  // the function to call, and the remaining arguments are the arguments to pass
  // to the function.  Since executing a function may take an arbitrary amount of
  // time, this will transition the server into an Execution state, and the next message
  // returned will be a CallResponse message.
  RunCall = 6;

  // Release the resources associated with a symbolic value.
  // Request.index contains the index of the value to release.
  // This does not expect a return value.
  ReleaseValue = 7;

  // Apply primitive operation to some arguments.
  //
  // The operation is in Request.prim_op.
  // The arguments are in request.arg.
  // The result width (if applicable) is in request.result_width.
  // The server will respond to this with a SimulatorValueResponse message.
  ApplyPrimitive = 8;

  // This request tells the simulator to keep running.
  //
  // It is only legal to send this message when the simulator has been paused
  // to execute an Override.
  //
  // Request.return_value should contain the value to return to the calling
  // function.
  ResumeSimulation = 9;

  // This request tells the simulator to print the given CFG.  This request
  // exists primarily for debugging purposes.
  //
  // Request.cfg should contain the CFG to be printed.
  PrintCFG = 10;

  // This request sets the verbosity level of the simulator.  Higher verbosity
  // levels generate more status and debugging informational messages.
  // Request.arg should contain exactly one natural number literal argument.
  SetVerbosity = 11;

  // This request takes a collection of symbolic values and exports them
  // in the requested format.
  ExportModel = 12;

  // This request takes a verification harness and returns a function handle that
  // can be used as an override for compositional verification.
  CompileVerificationOverride = 13;

  // Request the current setting of a configuration value.  Use the
  // Request.config_setting_name field to identify the setting of interest.
  GetConfigValue = 14;

  // Set a configuration value.  Use the Request.config_setting_name field to
  // identify the setting of interest, and use the Request.arg field for the
  // value to set.
  SetConfigValue = 15;

  // Request that the simulator use a verification harness to simulate some code.
  SimulateVerificationHarness = 16;

  /////////////////////////////////////////////////////////////////////////////
  // Operations to get predefined handles.

  // Request a predefined handle by its name.  Fill out the handle.display_name
  // field of the request object to indicate the name of the desired function handle.
  GetHandleByName = 255;

  // Requests a handle to write SMTLIB2.  This handle takes a string
  // representing the file name, and a Boolean value denoting the predicate
  // to check the satisfiability of.  No arguments are expected in the message
  // for obtaining this handle.
  //
  // OBSOLETE: use getHandleByName("write_SMTLIB2")
  //WriteSmtlib2Handle = 256;

  // Requests a handle to create a fresh symbolic value.  The message
  // should specify Request.varType to indicate the type of the value
  // to be returned by the handle.  The function itself takes no arguments.
  SymbolicHandle = 257;

  // Request a handle to call checkSat with ABC.
  // OBSOLETE: use getHandleByName("checkSatWithAbc")
  // CheckSatWithAbcHandle = 258;

  // Request a handle to print terms of a given type.  Set the Request.type
  // field to get a handle for printing terms of that type.
  PrintTermHandle = 259;

  // Request a handle to store a multipart word in a word map.  Such handles
  // Take four arguments.  First a boolean: true is big-endian; false is little-endian.
  // Second is an address.  Third is the value to store. Fourth is a word map.
  // The address type must match the bitwidth of the given word map, and the value to
  // store must be a multiple of the word map cell width.  The return value of this
  // function is an updated word map.
  //
  // Fill out the argument and return type values of the request.handle structure
  // to request a specific store function.  The name field will be ignored.
  MultipartStoreHandle = 260;

  // Request a handle to laod a multipart word in a word map.  Such handles
  // Take three arguments.  First a boolean: true is big-endian; false is little-endian.
  // Second is an address to load.  Third is a word map to load from.
  // The address type must match the bitwidth of the given word map.  The return
  // value of the function will be a bitvector value.  The bitwidth of the return value
  // must be a multiple of the word map cell width.
  //
  // Fill out the argument and return type values of the request.handle structure
  // to request a specific store function. The name field will be ignored.
  MultipartLoadHandle = 261;
}

// A request for when the simulator is currently waiting for more work.
message Request {
  // Code for a message.
  optional RequestCode code = 1;

  // Handle used for RegisterHandle and GetHandleByName
  optional HandleInfo handle = 2;

  // Control flow graph used by DefineCFG.
  optional Cfg cfg = 4;

  // Variable type argument (used by SymbolicHandle)
  optional VarType varType = 5;

  // The index of a symbolic value or handle (see RequestCode documentation).
  optional uint64 index = 6;

  // Operation used for ApplyPrimitive.
  optional PrimitiveOp prim_op = 7;

  // Arguments used for run_call (must be non-empty as first argument is function),
  // or ApplyPrimitive.  Also used for ExportModel request.
  repeated Value arg = 8;

  // Result type argument for RequestCode.ApplyPrimitive. This is required
  // in some cases where the result type of the operation is not completely
  // fixed by the types of the input arguments.
  optional CrucibleType result_type = 9;

  // Value returned to simulator when code = ResumeSimulation.
  optional Value return_value = 10;

  // Type argument for PrintTermHandle
  optional CrucibleType type = 11;

  // The format to use for export
  optional ExportFormat export_format = 12;

  // The destination for an export operation
  optional string export_path = 13;

  // Verification harness to use for the CompileVerificationHarness
  // request, or SimulateVerificationHarness request
  optional VerificationHarness verification_harness = 14;

  // Name of the configuration value being read or written by a
  // get or set option request
  optional string config_setting_name = 15;

  // Additional options necessary to setup verification simulations and
  // define what to do with the simulation products.
  optional VerificationSimulateOptions verification_sim_options = 16;
}


////////////////////////////////////////////////////////////////////////
// Responses
//
// All response types are gathered together into a GenericResponse
// container.

enum GenericResponseCode {
  // Respond with a string to print
  PrintGenResp = 0;

  // Respond with a SimulatorValueResponse
  SimulatorValueGenResp = 1;

  // Respond with a RegisterHandleResponse
  RegisterHandleGenResp = 2;

  // Respond with a PredefinedHandleInfo
  PredefHandleGenResp = 3;

  // Respond with a CallResponse
  CallGenResp = 4;

  // Respond with an Exception.  The message field of the GenericResponse
  // indicates the content of the exception.
  ExceptionGenResp = 5;

  // Respond with an acknowledgement.  This message indicates that the requested
  // action was taken successfully.  No additional information is transmitted.
  AcknowledgementResp = 6;
}

message GenericResponse {
  // Response code indicating what sort of response this is
  optional GenericResponseCode code = 1;

  // Message corresponding to the PrintGenResp code
  optional string message = 2;

  // Response value corresponding to the SimulatorValueGenResp code
  optional SimulatorValueResponse simValResponse = 3;

  // Response value corresponding to the RegisterHandleGenResp code
  optional RegisterHandleResponse regHandleResponse = 4;

  // Response value corresponding to the PredeHandleGenResp code
  optional PredefinedHandleInfo predefHandleResponse = 5;

  // Response value corresponding to the CallGenResp code
  optional CallResponse callResponse = 6;
}

////////////////////////////////////////////////////////////////////////
// Encoding for creating variables.

// Identifier for variable type.
enum VarTypeId {
  BoolVarType = 0;
  IntegerVarType = 1;
  RealVarType = 2;
  BitvectorVarType = 3;
}

// Type for symbolic value expressions.
message VarType {
  // Identifier for message.
  required VarTypeId id = 1;

  // Width for bitvector type.
  optional uint64 width = 2;

  // Optional dimensions for creating sequences of symbolic values.
  // If provided, they define the dimensions of a multi-dimensional
  // sequence of base types.  If not provided, a single base type
  // variable will be created.
  repeated uint64 dimension = 3;
}

////////////////////////////////////////////////////////////////////////
// ExportFormat codes

enum ExportFormat {
  // Export as an AIGER file
  ExportAIGER = 1;

  // Export as a SAWCore term
  ExportSAW = 2;
}


////////////////////////////////////////////////////////////////////////
// PrimitiveOp codes

// Code for operations of value to create.
// This is used inside Request
enum PrimitiveOp {

  /////////////////////////////////////////////////////////////////////////////
  // Boolean operations

  // Negate Boolean value.
  BoolNot = 1;
  // Add two Boolean values.
  BoolAnd = 2;
  // Take exclusive-or of values.
  BoolXor = 3;
  // If-then-else to three Boolean values.
  BoolIte = 4;

  /////////////////////////////////////////////////////////////////////////////
  // Operations on natural numbers

  // Add two natural numbers.
  NatAdd = 5;
  // Multiply two natural numbers.
  NatMul = 6;
  // If-then-else on natural numbers.
  // NatIte = 7;
  // Return true if two natural numbers are equivalent.
  NatEq  = 8;
  // Return true if first natural is less than second.
  NatLt  = 9;

  /////////////////////////////////////////////////////////////////////////////
  // Operations on Integers

  // Add two integers.
  IntegerAdd = 10;
  // Subtract second integer from another.
  IntegerSub = 11;
  // Multiply two integers.
  IntegerMul = 12;
  // If-then-else on integers.
  // IntegerIte = 13;
  // Return true if two integers are equivalent.
  IntegerEq  = 14;
  // Return true if first integer is less than second.
  IntegerLt  = 15;

  //////////////////////////////////////////////////////////////////////
  // Operations on Reals

  // Add two reals.
  RealAdd = 16;
  // Subtract second real from another.
  RealSub = 17;
  // Multiply two reals.
  RealMul = 18;
  // If-then-else on reals.
  RealIte = 19;
  // Return true if two reals are equivalent.
  RealEq  = 20;
  // Return true if first real is less than second.
  RealLt  = 21;

  //////////////////////////////////////////////////////////////////////
  // Bitvector operations

  // For the bitvector operations, I've added type signatures to the definitions
  // to help document what arguments are expected.  These should be stored
  // in the Request.arg field.  The result_width should be defined if the
  // result has a width that is not bound by one of the arguments.

  // Bitvector addition (expects two bitvectors arguments with same width)
  //   BVAdd :: BV(n) -> BV(n) -> BV(n)
  BVAdd = 22;
  // Bitvector subtraction (expects two bitvectors arguments with same width)
  //   BVSub :: BV(n) -> BV(n) -> BV(n)
  BVSub = 23;
  // Bitvector multiplication (expects two bitvectors arguments with same width)
  //   BVMul :: BV(n) -> BV(n) -> BV(n)
  BVMul = 24;
  // Bitvector unsigned division
  //   BVUdiv :: BV(n) -> BV(n) -> BV(n)
  BVUdiv = 25;
  // Bitvector unsigned remainder
  //   BVUrem :: BV(n) -> BV(n) -> BV(n)
  BVUrem = 26;
  // Bitvector signed division
  //   BVSrem :: n >= 1 => BV(n) -> BV(n) -> BV(n)
  BVSdiv = 27;
  // Bitvector signed remainder
  //   BVSrem :: n >= 1 => BV(n) -> BV(n) -> BV(n)
  BVSrem = 28;

  // If-then-else applied to bitvectors
  //   BVIte :: Bool -> BV(n) -> BV(n) -> BV(n)
  BVIte  = 30;
  // Check if bitvectors are equal.
  //   BVEq :: BV(n) -> BV(n) -> Bool
  BVEq   = 31;
  // Bitvector unsigned less-than or equal
  //   BVUle :: BV(n) -> BV(n) -> Bool
  BVUle  = 33;
  // Bitvector unsigned less-than
  //   BVUlt :: BV(n) -> BV(n) -> Bool
  BVUlt  = 32;
  // Bitvector signed less-than or equal
  //   BVSle :: n >= 1 => BV(n) -> BV(n) -> Bool
  BVSle  = 35;
  // Bitvector signed less-than
  //   BVSlt :: n >= 1 => BV(n) -> BV(n) -> Bool
  BVSlt  = 34;

  // Bitvector shift lift
  // The shift amount is an unsigned bitvector in the second argument.
  BVShl  = 36;
  // Logic shift right (zeros shifted in from right)
  // The shift amount is an unsigned bitvector in the second argument.
  BVLshr = 37;
  // Arithmetic shift right (zeros shifted in from right).
  // The shift amount is an unsigned bitvector in the second argument.
  BVAshr = 38;
  // Bitwise complement
  //   BVNot :: BV(n) -> BV(n)
  BVNot = 39;
  // Bitwise and
  //   BVAnd :: BV(n) -> BV(n) -> BV(n)
  BVAnd = 40;
  // Bitwise or
  //   BVOr :: BV(n) -> BV(n) -> BV(n)
  BVOr = 41;
  // Bitwise exclusive or
  //   BVXor :: BV(n) -> BV(n) -> BV(n)
  BVXor = 42;
  // Bitvector truncation (single bitvector argument expected)
  // The result_width field should contain the target width.
  //   BVTrunc :: (r <= n) => BV(n) -> BV(r)
  BVTrunc = 45;
  // Bitvector unsigned extension (single bitvector argument expected)
  // Request.result_width should contain the target width.
  //   BVZExt :: n <= r => BV(n) -> BV(r)
  BVZext = 43;
  // Bitvector signed extension (single bitvector argument expected)
  // The result_width field should contain the target width.
  //   BVSExt :: (1 <= n, n <= r) => BV(n) -> BV(r)
  BVSext = 44;
  // Concateneate two bitvectors.  The first argument corresponds to the
  // most significant bits, and the second to the least significant bits.
  //   BVConcat :: BV(n) -> BV(m) -> BV(n+m)
  BVConcat = 46;
  // Select a subvector from a bitvector.  The first argument is the index
  // to begin taking bits (counting from the most-significant bit as 0), and
  // the second argument is the number of bits to take.
  //   BVSelect :: (idx + n <= w) => (idx::Nat) -> (n::Nat) -> BV(w) -> BV(n)
  BVSelect = 47;
  // Return true if the given bitvector is nonzero; return false if it is zero
  //   BVNonzero :: BV(n) -> Bool
  BVNonzero = 48;
  // Return true if the unsigned addition of two bitvector values overflows.
  //   BVCarry :: BV(n) -> BV(n) -> Bool
  BVCarry = 49;
  // Return true if the signed addition of two bitvector values overflows.
  //   BVSCarry :: BV(n) -> BV(n) -> Bool
  BVSCarry = 50;
  // Return true if the signed subtraction of two bitvector values overflows.
  //   BVSBorrow :: BV(n) -> BV(n) -> Bool
  BVSBorrow = 51;

  //////////////////////////////////////////////////////////////////////
  // Conversions

  // Convert a natural number to an integer.
  NatToInteger = 60;
  // Convert an integer to a real.
  IntegerToReal = 61;
  // Return the constant 1 bitvector if the given boolean is true, and
  // return the constant 0 bitvector if the boolean is false.
  //   BoolToBV :: Bool -> BV(w)
  BoolToBV = 62;

  /////////////////////////////////////////////////////////////////////
  // Vector Operations

  // Build a vector directly from a sequence of values.  Every value
  // in the sequence is required to have the same type.
  //   VectorLit :: a -> ... -> a -> Vector(a)
  VectorLit = 70;

  // Build a vector of length n, each element of which contains
  // the given value.
  //   VectorReplicate :: Nat -> a -> Vector(a)
  VectorReplicate = 71;

  // Return true if the vector contains no elements.
  //   VectorIsEmpty :: Vector(a) -> Bool
  VectorIsEmpty = 72;

  // Return the number of elements in a vector.
  //   VectorSize :: Vector(a) -> Nat
  VectorSize = 73;

  // Returns the nth element of the given vector.  Results in a
  // run-time error if the index is not in bounds.
  //   VectorGetEntry :: Vector(a) -> Nat -> a
  VectorGetEntry = 74;

  // Returns an updated vector, where the nth element of the new vector
  // contains the given elemtn.
  //   VectorSetEntry :: Vector(a) -> Nat -> a -> Vector(a)
  VectorSetEntry = 75;

  /////////////////////////////////////////////////////////////////////
  // WordMap operations

  // Build a new, empty WordMap
  //   WordMapEmpty :: WordMap(n, a)
  WordMapEmpty = 80;

  // Insert an element into a WordMap
  //   WordMapInsert :: BV(n) -> a -> WordMap(n, a) -> WordMap(n, a)
  WordMapInsert = 81;

  // Lookup the value in a word map at the given index.  Results in
  // an error if the WordMap has no value at the given index.
  //   WordMapLookup :: BV(n) -> WordMap(n,a) -> a
  WordMapLookup = 82;

  // Lookup the value in a word map at the given index.  If the word map
  // has no value at that index, a default value is returned instead.
  //   WordMapLookupWithDefault :: BV(n) -> WordMap(n,a) -> a -> a
  WordMapLookupWithDefault = 83;

  ///////////////////////////////////////////////////////////////////////
  // Struct operations

  // Build a structure literal from a sequence of values
  //   StructLiteral :: a_1 -> a_2 -> ... -> a_n -> Struct(a_1,a_2,...,a_n)
  StructLiteral = 90;

  // Get an element from a structure value.  The index must be a nat literal.
  //   StructGet :: (i :: Nat) -> Struct(a_1,a_2,...,a_n) -> a_i
  StructGet = 91;

  // Update a structure value with a new element.  The index must be a nat literal.
  //   StructSet :: Struct(a_1,a_2,...,a_n) -> (i :: Nat) -> a_i -> Struct(a_1,a_2,...,a_n)
  StructSet = 92;

  //////////////////////////////////////////////////////////////////////////
  // Maybe operations

  // Build the 'Nothing' maybe value
  //    NothingValue :: Maybe a
  NothingValue = 100;

  // Build a 'Just' maybe value containing the given value
  //    JustValue :: a -> Maybe a
  JustValue = 101;

  /////////////////////////////////////////////////////////////////////////
  // Debugging operations

  // Generate a string representation of the given value, which must be
  // of a base type.
  //     ShowValue :: a -> String
  ShowValue = 102;

  // Return true if the given value of base type is concrete, or false if
  // it is symbolic.
  //    IsConcrete :: a -> Bool
  IsConcrete = 103;
}

// This enum is used to identify how the simulator value is represented.
// Constants are represented by passing the value directly while symbolic
// values are represented by an opaque handle.
enum ValueCode {
  // The value is a reference to a previous value.  The value of the reference is
  // stored in Value.index.  When the value represents
  // a simulator value, the value is a unique identifier.  Within a CFG, this
  // refers to an immutable result within the CFG.
  ReferenceValue = 0;
  // The value is the Boolean constant "true".
  TrueValue = 1;
  // The value is the Boolean constant "false".
  FalseValue = 2;

  // A constant natural number value.
  // This is stored in Value.data as a byte array of a unsigned integer
  // in big-endian form.
  NatValue = 3;
  // A constant integer value.
  // This is stored in Value.data as a byte array of a signed integer
  // big-endian form.
  IntegerValue = 4;
  // A constant rational value.
  // This is stored in Value.data with the enominator first encoded as a
  // varint unsigned integer followed by the numerator encoded in signed
  // big-endian form.
  RationalValue = 5;
  // A constant bitvector value.
  // Value.val stores the width and Value.data
  // stores the value in big-endian form.
  BitvectorValue = 6;
  // A constant string.
  // Value is stored in Value.string_lit.
  StringValue = 7;
  // The unit constant.
  UnitValue   = 8;
  // A handle literal.
  // Value.index stores the index of the handle reference.
  // Value.handle_info stores the information about the handle.
  // handle_info is only populated when the server sends a value back to the
  // client.  The client does not need to populate the field.
  FnHandleValue = 9;
}

// Message representing a simulator value.
message Value {
  // The kind of value encodeded.
  required ValueCode code = 1;
  // Used to store certain types of Value (see ValueCode constants).
  optional uint64 index = 2;
  // Used to store certain types of Value (see ValueCode constants).
  optional uint64 width = 3;

  // Payload containing binary date (used to store actual simulator value).
  optional bytes data = 4;

  // The actual value of a string literal.
  optional string string_lit = 5;

  // Information about handle if this is a handle.
  optional HandleInfo handle_info = 6;
}

// Message sent when simulator is requested to create a value.
message SimulatorValueResponse {
  // Indicates if request was successful.
  required bool successful = 1;
  // Value returned by the simulator.
  optional Value value = 2;
  // Error message when request failed.
  optional string error_msg = 3;
}

////////////////////////////////////////////////////////////////////////
// CrucibleType

// Code to identify crucible type.  This appears in the context of
// a CrucibleType value.
enum CrucibleTypeId {
  UnitType      = 0;
  BoolType      = 1;
  NatType       = 2;
  PosNatType    = 3;
  IntegerType   = 4;
  RealType      = 5;
  // Complex real numbers (no parameters)
  ComplexType   = 6;
  // BitvectorType denotes bitvectors with a specific length.  The
  // CrucibleType.width field stores the width.
  BitvectorType  = 7;
  // 16-bit IEEE754 float
  HalfFloatType  = 8;
  // 32-bit IEEE754 float
  SingleFloatType = 9;
  // 64-bit IEEE754 float
  DoubleFloatType = 10;
  // 128-bit IEEE754 float
  QuadFloatType   = 11;
  // 80-bit IEEE754 float
  X86_80FloatType = 12;
  // 2 64-bit floats used in double-double type.
  DoubleDoubleFloatType = 13;
  // A single unicode character (no parameters)
  CharType      = 14;
  StringType    = 15;
  // A function handle
  //   Has a list of parameters for arguments, followed by the type of
  //   the return value.
  FunctionHandleType = 16;

  // A maybe value (has one parameter for the type that it may contain)
  MaybeType = 17;
  // A vector value (has one parameter for the type of the elements).
  VectorType = 18;
  // A tuple containing an fixed tuple of values.  There is a parameter
  // for each value it may contain.
  StructType = 19;

  // NB: There is deliberately a gap here in the numbering from 20-31
  // where other, now unused, types used to be.

  // A parametric type mapping strings to partial values.
  StringMapType = 32;

  // A WordMap, which is a finite partial map from bitvectors to values
  WordMapType = 34;
}

// Information about a crucible type.
message CrucibleType {
  required CrucibleTypeId id = 1;
  // Width for bitvector type.
  optional uint64 width = 2;
  // Type parameters, if any
  repeated CrucibleType param = 3;
}

////////////////////////////////////////////////////////////////////////
// Messages used for register handle.

// Information about the handle to be registerd.
message HandleInfo {
  optional string display_name = 1;
  repeated CrucibleType arg_type = 2;
  optional CrucibleType return_type = 3;
}

// This message returns the identifier of a handle after the simulator
// creates it.
message RegisterHandleResponse {
  // Index for new handle.
  optional uint64 index = 1;
}

////////////////////////////////////////////////////////////////////////
// Messages for getting a predefined handle and information about it.

// Return message sent when getting a predefined handle.  Contains the Id
// and information about the handle.
message PredefinedHandleInfo {
  // A uint64 that uniquely identifies the Handle.  This can be used
  // to uniquely identify the handle for creating values.
  optional uint64 ref = 1;
  // Information about the handle.
  optional HandleInfo info = 2;
}

////////////////////////////////////////////////////////////////////////
// Messages when creating a control flow graph.

enum PositionCode {
  // An position with no additional information.
  InternalPos = 0;
  // A position in source code.
  // Position.path contains the full path to the file.
  // Position.line contains the line number in the file.
  // Position.col contains the column number in the file.
  SourcePos = 1;
  // A position in a bianry.
  // Position.path contains the full path to the binary.
  // Position.addr contains the address when loaded into memory.
  BinaryPos = 2;
  // Unstructured string position.
  // Position.pos_string contains an arbitrary string describing the
  // program position.
  OtherPos = 3;
}

// A position in the code.
message Position {
  optional PositionCode code = 1;
  optional string path = 2;
  optional uint64 line = 3;
  optional uint64 col  = 4;
  optional uint64 addr = 5;
  optional string functionName = 6;
  optional string value = 7;
}

message Cfg {
  optional uint64 handle_id = 1;
  // The position to use for the CFG.
  optional Position pos = 2;
  // Types of registers in CFG.
  repeated CrucibleType register = 3;
  // List of blocks in CFG.
  repeated Block block = 4;
}

// A basic block in the program.
// The block identifier is implicit and determined by the position in the CFG.
message Block {
  // The position to use for the start of the block.
  optional Position pos = 1;
  // Indicates if this block is a lambda block (default false)
  optional bool is_lambda = 2;
  // The type of a lambda argument is this is a lambda block.
  optional CrucibleType lambda_type = 3;
  // The list of statements for the block.
  repeated Statement statement = 4;
  // The terminal statement for a block.
  optional TermStmt termStmt = 5;
}

enum StatementCode {
  // Undefined is the default to catch cases where the statement id is out of range.
  UndefinedStatment = 0;

  // Execute a primitive operation in the block.
  // The operation is specified in Statement.prim_op.
  // The arguments are stored in Statement.expr.
  // Statement.result_type should contain the expected result returned by the
  // function call.
  ExecPrimitive = 1;

  // Call a function with the given arguments.
  // Statement.expr contains the function to call as the first argument, and
  //  then the actual arguments in the rest of the list.
  // Statement.result_type should contain the expected result returned by the
  // function call.
  Call      = 2;
  // Print a message.
  // Statement.expr constains an expression to print.  It should be a string
  // expression.
  Print     = 3;
  // Assert a condition holds.
  // This takes two expression arguments:
  // The first is the Boolean condition, the second is a string indicating what
  // to do if it fails.
  Assert    = 4;
  // Read a register
  // Statement.reg should contain the index of the register to read.
  ReadReg   = 5;
  // Write to a register.
  // Statement.reg should contain the index of the register to write to.
  // Statement.expr should contain the value to write.
  WriteReg  = 6;
  // Read a global variable.
  ReadGlobal = 7;
  // Write to a global variable.
  WriteGlobal = 8;
}

message Statement {
  optional StatementCode code = 1;

  // Position of statement.
  optional Position pos = 2;

  // Register used in read or write reg.
  optional uint64 reg = 3;

  // Operation used for ExecPrimitive.
  optional PrimitiveOp prim_op = 4;

  // Expressions referenced by statement.
  repeated Expr expr = 5;

  // Type of the result of the operation.
  optional CrucibleType result_type = 7;
}

enum TermStmtCode {
  // Undefined is the default to catch cases where the statement id is out of range.
  UndefinedTermStmt = 0;
  // Jump to a basic block.
  // TermStmt.block should contain the index of the block to jump to.
  JumpTermStmt = 1;
  // Branch on a condition.
  // TermStmt.expr should contain a Boolean expression to branch on.
  // TermStmt.block should two block indexes:
  // * the first is the block to jump to when the condition is true.
  // * the second is the block to jump to when the condition is true.
  BranchTermStmt = 2;
  // Return from this function.
  // TermStmt.expr should contain the value to return.
  ReturnTermStmt = 3;
  // Fail with an error.
  // TermStmt.expr should contain the message to print when failing.
  ErrorTermStmt = 4;
  // Jump to a new function with a tail call.
  // TermStmt.expr should contain the function to call as the first
  // argument, and the arguments to pass it as the remaining expressions.
  TailCallTermStmt = 5;
  // Case match on an expression with type <code>Maybe t</code>.
  // TermStmt.expr should contain the expression to pattern match on.
  // TermStmt.block should two block indexes:
  // * the first is a lambda block to jump to when the expression contains a value.
  // * the second is the block to jump to when the expression is nothing.
  SwitchMaybeTermStmt = 6;
}

message TermStmt {
  // Code identifying the type of statement that this is.
  optional TermStmtCode code = 1;
  // Position of statement.
  optional Position pos = 2;
  // Expressions referenced by this statement.
  repeated Expr expr = 3;
  // Blocks referenced by this statement.
  repeated uint64 block = 4;
}

// Code used to identify the source of a Crucible expression.
enum ExprCode {
  UnknownExpr = 0;

  // Expression denoting constant "true".
  TrueExpr = 1;

  // Expression denoting constant "false".
  FalseExpr = 2;

  // A constant natural number value.
  // This is stored in Expr.data as a byte array of a unsigned integer
  // in big-endian form.
  NatExpr = 3;
  // A constant integer value.
  // This is stored in Expr.data as a byte array of a signed integer
  // big-endian form.
  IntegerExpr = 4;
  // A constant rational value.
  // This is stored in Expr.data with the denominator first encoded as a
  // varint unsigned integer followed by the numerator encoded in signed
  // big-endian form.
  RationalExpr = 5;
  // A constant bitvector value.
  // Expr.width stores the width and Expr.data
  // stores the value in big-endian form.
  BitvectorExpr = 6;
  // A constant string.
  // Value is stored in Expr.string_lit.
  StringExpr    = 7;
  // The unit constant.
  UnitExpr      = 8;
  // A handle literal.
  // Expr.index stores the index of the handle reference.
  FnHandleExpr  = 9;

  // Code for expressions from function argument.
  // The index for this is stored in Expr.index.
  FunctionArgExpr = 10;

  // Code for expressions generated from a lambda block.
  // The field Expr.block_id contains the block that generated it.
  LambdaArgExpr   = 11;

  // Code for expressions created by previous statements.
  // Expr.block_id contains the index of the block that the statement
  // was defined in.
  // Expr.index contains the index within the block of the statement.
  StatementResultExpr = 12;
}

// Identifies a Crucible expression.
message Expr {
  optional ExprCode code = 1;

  // Index of block a statement result was created in.
  optional uint64 block_id = 2;

  // Index if this is an argument expression.
  optional uint64 index = 3;

  // Used to store certain types of Value (see ValueCode constants).
  optional uint64 width = 4;
  // Payload containing binary date (used to store actual simulator value).
  optional bytes data = 5;

  // The actual value of a string literal.
  optional string string_lit = 6;
}

////////////////////////////////////////////////////////////////////////
// Messages when running a function call.

// Code used to indicate how the simulator responded to the call.
enum CallResponseCode {
  // Indicates that an override was called.
  // CallResponse.handle_index must contain the index of the handle that was called.
  // CallResponse.arg contains the arguments to the function.
  // When this message is sent, the client should send back a Request object.
  CallOverrideCalled = 1;
  // Indicates execution along a particular path aborted,
  // simulator will keep execution.
  CallPathAborted = 2;
  // Indicates that the function returned a value.
  CallReturnValue = 3;
  // Indicates all branches ended in a abort
  // (this is after the @CallPathAborted message@).
  CallAllAborted = 4;
}

// Call response is the message sent from Crucible to the caller once
// execution has paused for some reason.
message CallResponse {
  // Code identifying what response occured from the call.
  optional CallResponseCode code = 1;

  // Return value for CallReturnValue.
  optional Value returnVal = 2;

  // Message to print for CallPathAborted.
  optional PathAbortedMessage message = 3;

  // Index of handle when override is called.
  optional uint64 handle_index = 4;

  // Arguments when override is called.
  repeated Value arg = 5;
}

enum PathAbortedCode {
  // No specific information avaliable
  AbortedGeneric = 0;

  // A path aborted because of a read-before-write error
  AbortedReadBeforeWrite = 1;

  // Attempted to call a value that does not represent a function
  AbortedNonFunction = 2;

  // An explicit assertion (i.e., one specificly inserted into the a CFG) failed
  AbortedUserAssertFailure = 3;
}

message PathAbortedMessage {
  // Code identifying the specific failure
  optional PathAbortedCode code = 1;

  // String message describing the error
  optional string message = 2;

  // Position information when a path is aborted
  repeated Position backtrace = 3;
}

// Request for the simulator indicating what to do next after it sends a
// call response that indicates simulation has not yet terminated.
message CallRequest {
   optional CallRequestCode code = 1;
}

// Code for what to do next when the simulator returns a CallResponse.
enum CallRequestCode {
  // Default code when the request code could not be parsed.
  UnknownCallRequest = 0;
  // Resume execution of the call.
  ResumeCall = 1;
  // Stop executing the call and switch back to a paused state (no response needeD).
  AbortCall = 2;
}


/////////////////////////////////////////////////////////////////////////////
// Messages related to compositional verification

message VerificationHarness {
  // Human-consumable name to give to the override function
  optional string name = 1;

  // Specification of prestate variables, register and memory state
  optional StateSpecification prestate_specification = 2;

  // Specification of poststate variables, register and memory state
  optional StateSpecification poststate_specification = 3;

  // Address word length, in bits;
  optional uint64 address_width = 4;

  // Machine endianess
  optional Endianness endianness = 5;

  // Register file width, in bits;
  optional uint64 reg_file_width = 6;

  // Optional function output term
  optional string output_expr = 7;

  // Cryptol specification files
  repeated string cryptol_source = 8;
}

// Code for indicating which byte-order to assume for verification harnesses
enum Endianness {
  // Little-endian byte order
  LittleEndian = 0;

  // Big-endian byte order
  BigEndian = 1;
}

message StateSpecification {
  // specification variables
  repeated VariableSpecification variable = 1;

  // specification register assignments
  repeated RegisterAssignment register_assignment = 2;

  // specification memory assignments
  repeated MemoryAssignment memory_assignment = 3;

  // specification variable bindings
  repeated VariableBinding variable_binding = 4;

  // specification conditions
  repeated string condition = 5;
}

message VariableSpecification {
  // The name of the varible, which must be a valid Cryptol identifier.
  optional string name = 1;

  // The dimensions of the variable.  There must be exactly one
  // or two dimensions, indicating words or vectors of words.
  // The word dimension must be a multiple of 8.
  repeated uint64 dimension = 2;
}

message RegisterAssignment {
  // The offset of the register in the register file
  optional uint64 reg_offset = 1;

  // The index of the specification variable found in this register
  optional VariableReference value = 2;
}

message MemoryAssignment {
  // The base pointer of the memory address
  optional VariableReference base = 1;

  // An offset from the base pointer
  optional uint64 offset = 2;

  // The value pointed to at that location
  optional VariableReference value = 3;
}

message VariableBinding {
  // The variable to be bound
  optional VariableReference var = 1;

  // The cryptol expression to bind to this variable
  optional string expr = 2;
}

enum VariableReferenceCode {
  // The value of the stack pointer
  StackPointerVar = 1;

  // The value of the return address
  ReturnAddressVar = 2;

  // The value of a user-defined variable
  UserVar = 3;
}

message VariableReference {
  // The variable reference type
  optional VariableReferenceCode code = 1;

  // The name of the variable,
  // for references to user-defined variables
  optional string var_name = 2;
}

////////////////////////////////////////////////////////////////////////
//
// Additional data about setting up simulation and where to deposit
// simulation results

message VerificationSimulateOptions {
  // Starting PC value for simulation
  optional Value start_pc = 1;

  // Starting stack pointer value for simulation
  optional Value start_stack = 2;

  // Return pointer value for simulation
  optional Value return_address = 3;

  // Function handle for the program to simulate
  optional Value program = 4;

  // Directory where to write output SAWCore terms
  optional string output_directory = 5;

  // Should we produce proof obligations for side-conditions and
  // postconditions, etc?
  // optional bool output_proof_obligations = 6;

  // Shoule proof obligations be split into separate files?
  optional bool separate_obligations = 7;
}
