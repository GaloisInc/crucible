(defun
   @rot-cases
   ((t (Variant Integer Bool String)))
   (Variant Bool String Integer)
   (start go: (case t int: bool: string:))
   (defblock (int: x Integer)
      (let i (the (Variant Bool String Integer) (inj 2 x)))
      (return i))
   (defblock (bool: y Bool)
      (let b (the (Variant Bool String Integer) (inj 0 y)))
      (return b))
   (defblock (string: z String)
      (let s (the (Variant Bool String Integer) (inj 1 z)))
      (return s)))

rot-cases
%0
  % 3:5
  vswitch $0 {
    0 -> %1();
    1 -> %2();
    2 -> %3();
  }
  % no postdom
%1
  % 8:12
  $1 = injectVariant([BoolRepr, StringRepr, IntegerRepr], 2, $0)
  % 9:5
  return $1
  % no postdom
%2
  % 11:12
  $1 = injectVariant([BoolRepr, StringRepr, IntegerRepr], 0, $0)
  % 12:5
  return $1
  % no postdom
%3
  % 14:12
  $1 = injectVariant([BoolRepr, StringRepr, IntegerRepr], 1, $0)
  % 15:5
  return $1
  % no postdom
