(defun @vec-test ((n Nat) (x Integer)) (Vector String)
   (registers ($res (Vector String)))
   (start first:
      (set-register! $res
                     (the (Vector String)
                          (vector "hello" "this" "is" "a" "vector")))
      (let foo (the (Vector String) (vector-replicate n (show x))))
      (let a (vector-empty? (the (Vector Bool) (vector))))
      (let b (vector-empty? (the (Vector Bool) (vector #t #f #f #t))))
      (let done $res)
      (let c (vector-size done))
      (let d (vector-size foo))
      (let e (vector-get done 3))
      (let f (vector-set done 3 "isn't"))
      (let done $res)
      (return done)))

%0
  % 5:25
  $2 = textLit("hello")
  % 5:25
  $3 = textLit("this")
  % 5:25
  $4 = textLit("is")
  % 5:25
  $5 = textLit("a")
  % 5:25
  $6 = textLit("vector")
  % 5:25
  $7 = vectorLit(StringRepr, [$2, $3, $4, $5, $6])
  % 6:14
  $8 = showValue(BaseIntegerRepr, $1)
  % 6:14
  $9 = vectorReplicate(StringRepr, $0, $8)
  % 7:12
  $10 = vectorLit(BoolRepr, [])
  % 7:12
  $11 = vectorIsEmpty($10)
  % 8:12
  $12 = boolLit(True)
  % 8:12
  $13 = boolLit(False)
  % 8:12
  $14 = vectorLit(BoolRepr, [$12, $13, $13, $12])
  % 8:12
  $15 = vectorIsEmpty($14)
  % 10:12
  $16 = vectorSize($7)
  % 11:12
  $17 = vectorSize($9)
  % 12:12
  $18 = natLit(3)
  % 12:12
  $19 = vectorGetEntry(StringRepr, $7, $18)
  % 13:12
  $20 = textLit("isn't")
  % 13:12
  $21 = vectorSetEntry(StringRepr, $7, $18, $20)
  % 15:5
  return $7
  % no postdom