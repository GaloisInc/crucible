(defun @test ((b Bool) (m (Maybe Integer))) Any
   (registers ($c Bool))
   (start here: (set-register! $c b) (jump there:))
   (defblock there: (let d $c) (branch d where: next:))
   (defblock where:
      (let c $c)
      (set-register! $c (not c))
      (jump there:))
   (defblock next: (maybe-branch m yep: nope:))
   (defblock (yep: num Integer)
      (let val (to-any num))
      (return val))
   (defblock nope: (let msg "nope") (error msg))
   (defblock unreachable:
      (let x (the Integer 42))
      (output yep: x)))

(defun @more () Any
   (start here:
      (let test @test)
      (let yep #t)
      (let other (the (Maybe Integer) (just 3)))
      (tail-call test yep other)))

test
%0
  % 8:5
  jump %1($0, $1)
  % no postdom
%1
  % 11:5
  br $0 %2($0, $1) %3($1)
  % no postdom
%2
  % 14:23
  $2 = not($0)
  % 15:5
  jump %1($2, $1)
  % no postdom
%3
  % 17:5
  maybeBranch $0 {
    Just -> %4()
    Nothing -> %5()
    }
  % no postdom
%4
  % 19:14
  $1 = packAny(IntegerRepr, $0)
  % 20:5
  return $1
  % no postdom
%5
  % 22:14
  $0 = textLit("nope")
  % 23:5
  error $0
  % no postdom
more
%0
  % 30:15
  $0 = handleLit(test)
  % 31:14
  $1 = boolLit(True)
  % 32:16
  $2 = intLit(3)
  % 32:16
  $3 = justValue(IntegerRepr, $2)
  % 33:5
  tailCall $0 ($1, $3)
  % no postdom
