(defun @test-integer () Integer
   (start start:
      (let q (the Integer (negate 2)))
      (let v (the Integer 15))
      (let x (/ v 2))
      (let y (* x q))
      (let r (+ (mod x 5) -4))
      (let ra (abs r))
      (let z (- y ra))
      (let p1 (< x y))
      (let p2 (<= x y))
      (let p3 (equal? x y))
      (let p (and p1 p2 p3))
      (let za (if p q v))
      (let neg-one (the Integer -1))
      (return za)))

test-integer
%0
  % 5:12
  $0 = intLit(2)
  % 5:12
  $1 = intNeg($0)
  % 6:12
  $2 = intLit(15)
  % 7:12
  $3 = intDiv($2, $0)
  % 8:12
  $4 = intMul($3, $1)
  % 9:12
  $5 = intLit(5)
  % 9:12
  $6 = intMod($3, $5)
  % 9:12
  $7 = intLit(-4)
  % 9:12
  $8 = intAdd($6, $7)
  % 10:13
  $9 = intAbs($8)
  % 11:13
  $10 = intSub($4, $9)
  % 12:13
  $11 = intLt($3, $4)
  % 13:13
  $12 = intLe($3, $4)
  % 14:13
  $13 = baseIsEq(BaseIntegerRepr, $3, $4)
  % 15:12
  $14 = and($11, $12)
  % 15:12
  $15 = and($14, $13)
  % 16:13
  $16 = baseIte(BaseIntegerRepr, $15, $1, $2)
  % 17:18
  $17 = intLit(-1)
  % 18:5
  return $16
  % no postdom
