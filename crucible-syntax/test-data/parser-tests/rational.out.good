(defun @test-rational () Real
   (start start:
      (let v (the Real 1/3))
      (let x (the Real (/ v 2/1)))
      (let a (the Real (+ (mod 1/2 3/2) 22)))
      (let intp (integer? a))
      (let y (the Real (+ x v)))
      (let z (the Real (- x v)))
      (let w (the Real (* y z)))
      (let q (the Real (/ y z)))
      (let m (the Real (mod y z)))
      (let p1 (equal? x y))
      (let p2 (< x y))
      (let p3 (<= x y))
      (let p (and p1 (and p2 p3)))
      (let r (if p w q))
      (return r)))

test-rational
%0
  % 5:12
  $0 = rationalLit(1 % 3)
  % 6:12
  $1 = rationalLit(2 % 1)
  % 6:12
  $2 = realDiv($0, $1)
  % 7:12
  $3 = rationalLit(1 % 2)
  % 7:12
  $4 = rationalLit(3 % 2)
  % 7:12
  $5 = realMod($3, $4)
  % 7:12
  $6 = rationalLit(22 % 1)
  % 7:12
  $7 = realAdd($5, $6)
  % 8:15
  $8 = realIsInteger($7)
  % 9:12
  $9 = realAdd($2, $0)
  % 10:12
  $10 = realSub($2, $0)
  % 11:12
  $11 = realMul($9, $10)
  % 12:12
  $12 = realDiv($9, $10)
  % 13:12
  $13 = realMod($9, $10)
  % 15:13
  $14 = baseIsEq(BaseRealRepr, $2, $9)
  % 16:13
  $15 = realLt($2, $9)
  % 17:13
  $16 = realLe($2, $9)
  % 18:12
  $17 = and($15, $16)
  % 18:12
  $18 = and($14, $17)
  % 19:12
  $19 = baseIte(BaseRealRepr, $18, $11, $12)
  % 20:5
  return $19
  % no postdom
