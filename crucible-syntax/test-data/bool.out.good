(defun @test-bool () Bool
   (start start:
      (let x #t)
      (let y #f)
      (let z (and (and x y) #f))
      (let q (or #t (or x y)))
      (let w (if q (not z) y))
      (let r (equal? (xor z w) q))
      (return r)))

test-bool
%0
  % 5:12
  $0 = boolLit(True)
  % 6:12
  $1 = boolLit(False)
  % 7:12
  $2 = and($0, $1)
  % 7:12
  $3 = and($2, $1)
  % 8:12
  $4 = or($0, $1)
  % 8:12
  $5 = or($0, $4)
  % 9:12
  $6 = not($3)
  % 9:12
  $7 = baseIte(BaseBoolRepr, $5, $6, $1)
  % 10:12
  $8 = boolXor($3, $7)
  % 10:12
  $9 = baseIsEq(BaseBoolRepr, $8, $5)
  % 11:5
  return $9
  % no postdom
