#define _GNU_SOURCE
#include <crucible.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

// After compiling these to LLVM, we replace them with
// llvm.is.fpclass.f32 and llvm.is.fpclass.f64, respectively (which are not
// legal C function names).
extern bool llvm_is_fpclass_f32(float  op, uint32_t test);
extern bool llvm_is_fpclass_f64(double op, uint32_t test);

int main(void) {
  ////////////
  // double //
  ////////////

  // Signaling NaN
  check(llvm_is_fpclass_f64(NAN, (1 << 0)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 0))));

  // Quiet NaN
  check(llvm_is_fpclass_f64(NAN, (1 << 1)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 1))));

  // Negative infinity
  check(llvm_is_fpclass_f64(-INFINITY, (1 << 2)));
  check(!(llvm_is_fpclass_f64(INFINITY, (1 << 2))));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 2))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 2))));

  // Negative normal
  check(llvm_is_fpclass_f64(-42.5, (1 << 3)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 3))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 3))));

  // Negative subnormal
  check(llvm_is_fpclass_f64(-0x4.0p-1076, (1 << 4)));
  check(!(llvm_is_fpclass_f64(0x4.0p-1076, (1 << 4))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 4))));

  // Negative zero
  check(llvm_is_fpclass_f64(-0.0f, (1 << 5)));
  check(!(llvm_is_fpclass_f64(0.0f, (1 << 5))));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 5))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 5))));

  // Positive zero
  check(!(llvm_is_fpclass_f64(-0.0f, (1 << 6))));
  check(llvm_is_fpclass_f64(0.0f, (1 << 6)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 6))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 6))));

  // Positive subnormal
  check(!(llvm_is_fpclass_f64(-0x4.0p-1076, (1 << 7))));
  check(llvm_is_fpclass_f64(0x4.0p-1076, (1 << 7)));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 7))));

  // Positive normal
  check(!(llvm_is_fpclass_f64(-42.5, (1 << 8))));
  check(llvm_is_fpclass_f64(42.5, (1 << 8)));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 8))));

  // Positive infinity
  check(!(llvm_is_fpclass_f64(-INFINITY, (1 << 9))));
  check(llvm_is_fpclass_f64(INFINITY, (1 << 9)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 9))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 9))));

  // Try some combinations of bitmasks

  // NaN
  check(llvm_is_fpclass_f64(NAN, (1 << 0) | (1 << 1)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 0) | (1 << 1))));

  // Infinity
  check(llvm_is_fpclass_f64(-INFINITY, (1 << 2) | (1 << 9)));
  check(llvm_is_fpclass_f64(INFINITY, (1 << 2) | (1 << 9)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 2) | (1 << 9))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 2) | (1 << 9))));

  // Normal
  check(llvm_is_fpclass_f64(-42.5, (1 << 3) | (1 << 8)));
  check(llvm_is_fpclass_f64(42.5, (1 << 3) | (1 << 8)));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 3) | (1 << 8))));

  // Subnormal
  check(llvm_is_fpclass_f64(-0x4.0p-1076, (1 << 4) | (1 << 7)));
  check(llvm_is_fpclass_f64(0x4.0p-1076, (1 << 4) | (1 << 7)));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 4) | (1 << 7))));

  // Zero
  check(llvm_is_fpclass_f64(-0.0f, (1 << 5) | (1 << 6)));
  check(llvm_is_fpclass_f64(0.0f, (1 << 5) | (1 << 6)));
  check(!(llvm_is_fpclass_f64(42.5, (1 << 5) | (1 << 6))));
  check(!(llvm_is_fpclass_f64(NAN, (1 << 5) | (1 << 6))));

  ///////////
  // float //
  ///////////

  // Signaling NaN
  check(llvm_is_fpclass_f32(NAN, (1 << 0)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 0))));

  // Quiet NaN
  check(llvm_is_fpclass_f32(NAN, (1 << 1)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 1))));

  // Negative infinity
  check(llvm_is_fpclass_f32(-INFINITY, (1 << 2)));
  check(!(llvm_is_fpclass_f32(INFINITY, (1 << 2))));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 2))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 2))));

  // Negative normal
  check(llvm_is_fpclass_f32(-42.5f, (1 << 3)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 3))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 3))));

  // Negative subnormal
  check(llvm_is_fpclass_f32(-0x8.0p-152f, (1 << 4)));
  check(!(llvm_is_fpclass_f32(0x8.0p-152f, (1 << 4))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 4))));

  // Negative zero
  check(llvm_is_fpclass_f32(-0.0f, (1 << 5)));
  check(!(llvm_is_fpclass_f32(0.0f, (1 << 5))));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 5))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 5))));

  // Positive zero
  check(!(llvm_is_fpclass_f32(-0.0f, (1 << 6))));
  check(llvm_is_fpclass_f32(0.0f, (1 << 6)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 6))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 6))));

  // Positive subnormal
  check(!(llvm_is_fpclass_f32(-0x8.0p-152f, (1 << 7))));
  check(llvm_is_fpclass_f32(0x8.0p-152f, (1 << 7)));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 7))));

  // Positive normal
  check(!(llvm_is_fpclass_f32(-42.5f, (1 << 8))));
  check(llvm_is_fpclass_f32(42.5f, (1 << 8)));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 8))));

  // Positive infinity
  check(!(llvm_is_fpclass_f32(-INFINITY, (1 << 9))));
  check(llvm_is_fpclass_f32(INFINITY, (1 << 9)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 9))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 9))));

  // Try some combinations of bitmasks

  // NaN
  check(llvm_is_fpclass_f32(NAN, (1 << 0) | (1 << 1)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 0) | (1 << 1))));

  // Infinity
  check(llvm_is_fpclass_f32(-INFINITY, (1 << 2) | (1 << 9)));
  check(llvm_is_fpclass_f32(INFINITY, (1 << 2) | (1 << 9)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 2) | (1 << 9))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 2) | (1 << 9))));

  // Normal
  check(llvm_is_fpclass_f32(-42.5f, (1 << 3) | (1 << 8)));
  check(llvm_is_fpclass_f32(42.5f, (1 << 3) | (1 << 8)));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 3) | (1 << 8))));

  // Subnormal
  check(llvm_is_fpclass_f32(-0x8.0p-152f, (1 << 4) | (1 << 7)));
  check(llvm_is_fpclass_f32(0x8.0p-152f, (1 << 4) | (1 << 7)));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 4) | (1 << 7))));

  // Zero
  check(llvm_is_fpclass_f32(-0.0f, (1 << 5) | (1 << 6)));
  check(llvm_is_fpclass_f32(0.0f, (1 << 5) | (1 << 6)));
  check(!(llvm_is_fpclass_f32(42.5f, (1 << 5) | (1 << 6))));
  check(!(llvm_is_fpclass_f32(NAN, (1 << 5) | (1 << 6))));

  return 0;
}
