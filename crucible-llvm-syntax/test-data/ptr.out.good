(defun @test-ptr () (Ptr 64)
   (start start:
      (let blk0 (the Nat 0))
      (let off0 (bv 64 0))
      (let p0 (ptr 64 blk0 off0))
      (let p (ptr-ite 64 #t p0 p0))
      (let blk (ptr-block 64 p))
      (let off (ptr-offset 64 p))
      (assert! (equal? blk0 blk) "block numbers equal")
      (assert! (equal? off0 off) "offsets equal")
      (let sz (bv 64 1))
      (let a (alloca none sz))
      (return p)))

test-ptr
%0
  % 3:15
  $0 = natLit(0)
  % 4:15
  $1 = bVLit(64, BV 0)
  % 5:13
  $2 = extensionApp(pointerExpr $0 $1)
  % 6:12
  $3 = boolLit(True)
  % 6:12
  $4 = extensionApp(pointerIte $3 $2 $2)
  % 7:14
  $5 = extensionApp(pointerBlock $4)
  % 8:14
  $6 = extensionApp(pointerOffset $4)
  % 9:14
  $7 = natEq($0, $5)
  % 9:32
  $8 = stringLit("block numbers equal")
  % 9:5
  assert($7, $8)
  % 10:14
  $9 = baseIsEq(BaseBVRepr 64, $1, $6)
  % 10:32
  $10 = stringLit("offsets equal")
  % 10:5
  assert($9, $10)
  % 12:13
  $11 = bVLit(64, BV 1)
  % 13:12
  $12 = alloca crucible-llvm-syntax-test-memory $11 Alignment 0 test-data/ptr.cbl:13:12
  % 15:5
  return $4
  % no postdom
