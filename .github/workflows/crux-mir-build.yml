name: crux-mir
on:
  push:
    branches: [master, "release-**"]
  pull_request:
  workflow_dispatch:

# The CACHE_VERSION can be updated to force the use of a new cache if
# the current cache contents become corrupted/invalid.  This can
# sometimes happen when (for example) the OS version is changed but
# older .so files are cached, which can have various effects
# (e.g. cabal complains it can't find a valid version of the "happy"
# tool).
#
# This also periodically happens on MacOS builds due to a tar bug
# (symptom: "No suitable image found ... unknown file type, first
# eight bytes: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00")
env:
  CACHE_VERSION: 4

jobs:
  outputs:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.outputs.outputs.changed-files }}
      name: ${{ steps.outputs.outputs.name }}
      crux-mir-version: ${{ steps.outputs.outputs.crux-mir-version }}
      release: ${{ steps.env.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: outputs
        run: |
          .github/ci.sh set_crux_mir_version

  build:
    runs-on: ${{ matrix.os }}
    needs: [outputs]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ghc: ["8.8.4", "8.10.7", "9.0.2"]
        include:
          - os: macos-10.15
            ghc: 9.0.2
          # We want Windows soon, but it doesn't need to be now
    name: crux-mir - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:21.11
          install_url: https://releases.nixos.org/nix/nix-2.4/install

      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2020-03-22
          override: true
          components: rustc-dev

      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-${{ github.sha }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-

      - shell: bash
        run: .github/ci.sh install_system_deps
        env:
          SOLVER_PKG_VERSION: "snapshot-20210917"
          BUILD_TARGET_OS: ${{ matrix.os }}

      - name: Setup Environment Vars
        run: |
          GHC=haskell.compiler.ghc$(echo ${{ matrix.ghc }} | sed -e s,\\.,,g)
          case ${{ matrix.ghc }} in
            9.0.2) GHC_NIXPKGS=github:nixos/nixpkgs/nixos-unstable ;;
            *)     GHC_NIXPKGS=github:nixos/nixpkgs/21.11 ;;
          esac
          echo NS="nix shell ${GHC_NIXPKGS}#cabal-install ${GHC_NIXPKGS}#${GHC} nixpkgs#gmp nixpkgs#zlib nixpkgs#zlib.dev" >> $GITHUB_ENV

      - name: Package's Cabal/GHC compatibility
        shell: bash
        if: runner.os == 'Linux'
        # Using setup will use the cabal library installed with GHC
        # instead of the cabal library of the Cabal-install tool to
        # verify the cabal file is compatible with the associated
        # GHC cabal library version.  Cannot run configure or build,
        # because dependencies aren't present, but a clean is
        # sufficient to cause parsing/validation of the cabal file.
        run: |
          defsetup()  { echo import Distribution.Simple; echo main = defaultMain; }
          setup_src() { if [ ! -f Setup.hs ] ; then defsetup > DefSetup.hs; fi; ls *Setup.hs; }
          setup_bin() { echo setup.${{ matrix.ghc }}; }
          with_ghc()  { $NS -c ${@}; }
          (cd crux-mir;      with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)

      - shell: bash
        run: cd dependencies/mir-json && cargo install --locked --force

      - shell: bash
        run: .github/ci.sh configure

      - shell: bash
        run: .github/ci.sh build exe:crux-mir

      - shell: bash
        run: cd crux-mir && bash ./translate_libs.sh

      - shell: bash
        run: .github/ci.sh test crux-mir

      - shell: bash
        run: .github/ci.sh bundle_crux_mir_files
        if: github.repository == 'GaloisInc/crucible'
        env:
          OS_TAG: ${{ matrix.os }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          VERSION: ${{ needs.outputs.outputs.crux-mir-version }}

      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/heads/release-')
        with:
          path: crux-mir-*.tar.gz*
          name: crux-mir-${{ runner.os }}-${{ matrix.ghc }}
