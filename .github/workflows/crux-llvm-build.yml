name: crux-llvm
on:
  push:
    branches: [master, "release-**"]
  pull_request:
  workflow_dispatch:

jobs:
  outputs:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.outputs.outputs.changed-files }}
      name: ${{ steps.outputs.outputs.name }}
      release: ${{ steps.env.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

  build:
    runs-on: ${{ matrix.os }}
    needs: [outputs]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # , windows-latest]
        ghc: ["8.6.5", "8.8.4", "8.10.2"]
        # Windows only seems to work on 8.6.5. Others result in
        # segfaults or other internal errors.
        exclude:
          - os: windows-latest
            ghc: 8.10.2
          - os: windows-latest
            ghc: 8.8.4
    name: crux-llvm - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-haskell@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: actions/cache@v1
        name: Cache cabal store
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          # https://github.com/actions/cache/issues/109 "Enable always writing cache to support hermetic build systems"
          # https://github.com/actions/cache/issues/239#issuecomment-606950711 Investigate this workaround if cache starts filling up
          key: store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-
            store-${{ runner.os }}-${{ matrix.ghc }}-
            store-${{ runner.os }}-

      - uses: actions/cache@v1
        name: Cache dist-newstyle
        with:
          path: dist-newstyle
          key: dist-newstyle-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            dist-newstyle-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-
            dist-newstyle-${{ runner.os }}-${{ matrix.ghc }}-

      - shell: bash
        run: .github/ci.sh install_system_deps
        env:
          Z3_VERSION: "4.8.8"
          YICES_VERSION: "2.6.2"

      - shell: bash
        run: .github/ci.sh configure

      - shell: bash
        run: .github/ci.sh build exe:crux-llvm

      - shell: bash
        name: Test (Linux)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'Linux'
        env:
          LLVM_LINK: "llvm-link-10"
          CLANG: "clang-10"

      - shell: bash
        name: Test (macOS)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'macOS'
        env:
          LLVM_LINK: "/usr/local/opt/llvm/bin/llvm-link"
          CLANG: "/usr/local/opt/llvm/bin/clang"

      - shell: bash
        name: Test (Windows)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'Windows'
        env:
          LLVM_LINK: "/c/Program Files/LLVM/bin/llvm-link"
          CLANG: "/c/Program Files/LLVM/bin/clang"

      - shell: bash
        run: .github/ci.sh build exe:crux-llvm-svcomp
        if: runner.os != 'Windows'

      - shell: bash
        run: .github/ci.sh bundle_crux_llvm_files

      - uses: actions/upload-artifact@v2
        with:
          path: crux-llvm-*.tar.gz
          name: crux-llvm-${{ runner.os }}-${{ matrix.ghc }}
