name: crux-llvm

on:
  push:
    branches: [master, "release-**"]
  pull_request:
  workflow_dispatch:

# The CACHE_VERSION can be updated to force the use of a new cache if
# the current cache contents become corrupted/invalid.  This can
# sometimes happen when (for example) the OS version is changed but
# older .so files are cached, which can have various effects
# (e.g. cabal complains it can't find a valid version of the "happy"
# tool).
#
# This also periodically happens on MacOS builds due to a tar bug
# (symptom: "No suitable image found ... unknown file type, first
# eight bytes: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00")
env:
  CACHE_VERSION: 1

jobs:
  outputs:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.outputs.outputs.changed-files }}
      name: ${{ steps.outputs.outputs.name }}
      crux-llvm-version: ${{ steps.outputs.outputs.crux-llvm-version }}
      release: ${{ steps.env.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: outputs
        run: |
          .github/ci.sh set_crux_llvm_version

  build:
    runs-on: ${{ matrix.os }}
    needs: [outputs]
    continue-on-error: ${{ matrix.allow-failure }}
    env:
      CI_TEST_LEVEL: "1"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04] # , macos-latest] # , windows-latest]
        ghc: ["8.6.5", "8.8.4", "8.10.4"]
        allow-failure: [false]
        include:
          - os: macos-latest
            ghc: 8.6.5
            allow-failure: true
          - os: macos-latest
            ghc: 8.8.4
            allow-failure: true
          - os: macos-latest
            ghc: 8.10.2
            allow-failure: true
        # Windows only seems to work on 8.6.5. Others result in
        # segfaults or other internal errors.
        exclude:
          - os: windows-latest
            ghc: 8.10.2
          - os: windows-latest
            ghc: 8.8.4
    name: crux-llvm - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-20.09
      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-${{ github.sha }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(format('cabal.GHC-{0}.config', matrix.ghc)) }}-

      - shell: bash
        run: .github/ci.sh install_system_deps
        env:
          Z3_VERSION: "4.8.8"
          YICES_VERSION: "2.6.2"

      - name: Setup Environment Vars
        run: |
          GHC=haskell.compiler.ghc$(echo ${{ matrix.ghc }} | sed -e s,\\.,,g)
          echo GHC=$GHC >> $GITHUB_ENV

      - name: Package's Cabal/GHC compatibility
        shell: bash
        if: runner.os == 'Linux'
        # Using setup will use the cabal library installed with GHC
        # instead of the cabal library of the Cabal-install tool to
        # verify the cabal file is compatible with the associated
        # GHC cabal library version.  Cannot run configure or build,
        # because dependencies aren't present, but a clean is
        # sufficient to cause parsing/validation of the cabal file.
        run: |
          defsetup()  { echo import Distribution.Simple; echo main = defaultMain; }
          setup_src() { if [ ! -f Setup.hs ] ; then defsetup > DefSetup.hs; fi; ls *Setup.hs; }
          setup_bin() { echo setup.${{ matrix.ghc }}; }
          with_ghc()  { nix-shell -p $GHC --run "$(echo ${@})"; }
          (cd crucible;      with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)
          (cd crucible-llvm; with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)
          (cd crux;          with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)
          (cd crux-llvm;     with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)
          (cd uc-crux-llvm;  with_ghc ghc -o $(setup_bin) $(setup_src) && ./$(setup_bin) clean)


      - shell: bash
        run: .github/ci.sh configure

      - shell: bash
        run: |
          .github/ci.sh build exe:crux-llvm
          .github/ci.sh build exe:uc-crux-llvm

      - shell: bash
        name: Test crucible (Linux)
        run: .github/ci.sh test crucible
        if: runner.os == 'Linux'
        env:
          LLVM_LINK: "llvm-link-10"
          CLANG: "clang-10"

      - shell: bash
        name: Test crucible-symio (Linux)
        run: cabal test pkg:crucible-symio
        if: runner.os == 'Linux'

      - shell: bash
        name: Test crucible-llvm (Linux)
        run: .github/ci.sh test crucible-llvm
        if: runner.os == 'Linux'
        env:
          LLVM_LINK: "llvm-link-10"
          LLVM_AS: "llvm-as-10"
          CLANG: "clang-10"

      - shell: bash
        name: Test crux-llvm (Linux)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'Linux'
        env:
          LLVM_LINK: "llvm-link-10"
          CLANG: "clang-10"

      - shell: bash
        name: Test uc-crux-llvm (Linux)
        run: .github/ci.sh test uc-crux-llvm
        if: matrix.os == 'ubuntu-20.04'
        env:
          LLVM_LINK: "llvm-link-10"
          CLANG: "clang-10"

      - shell: bash
        name: Install LLVM-11 for MacOS
        if: runner.os == 'macOS'
        run: |
          LLVM_TAR=https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz
          curl -sSL $LLVM_TAR -o llvm.tar.xz && tar xzf llvm.tar.xz && mv clang+llvm-* llvm
          echo "#!/usr/bin/env bash" > llvm/bin/clang-withIncl
          echo "clang -I${{ github.workspace }}/llvm/include -I${{ github.workspace }}/llvm/include/c++/v1" >> llvm/bin/clang-withIncl
          chmod +x llvm/bin/clang-withIncl
          echo "$PWD/llvm/bin" >> $GITHUB_PATH

      - uses: actions/cache@v2
        name: Cache LLVM-11
        if: runner.os == 'macOS'
        with:
          path: ${{ github.workspace }}/llvm
          key: llvm-11.0.0
          restore-keys: llvm-11.0.0

      - shell: bash
        name: Test crucible (macOS)
        run: .github/ci.sh test crucible
        if: runner.os == 'macOS'
        env:
          LLVM_LINK: "${{ github.workspace }}/llvm/bin/llvm-link"
          CLANG: "${{ github.workspace }}/llvm/bin/clang"

      - shell: bash
        name: Test crucible-llvm (macOS)
        run: .github/ci.sh test crucible-llvm
        if: runner.os == 'macOS'
        env:
          LLVM_LINK: "${{ github.workspace }}/llvm/bin/llvm-link"
          LLVM_AS: "${{ github.workspace }}/llvm/bin/llvm-as"
          CLANG: "${{ github.workspace }}/llvm/bin/clang"

      - shell: bash
        name: Test crux-llvm (macOS)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'macOS'
        env:
          LLVM_LINK: "${{ github.workspace }}/llvm/bin/llvm-link"
          CLANG: "${{ github.workspace }}/llvm/bin/clang-withIncl"

      - shell: bash
        name: Test crucible (Windows)
        run: .github/ci.sh test crucible
        if: runner.os == 'Windows'
        env:
          LLVM_LINK: "/c/Program Files/LLVM/bin/llvm-link"
          CLANG: "/c/Program Files/LLVM/bin/clang"

      - shell: bash
        name: Test crucible-llvm (Windows)
        run: .github/ci.sh test crucible-llvm
        if: runner.os == 'Windows'
        env:
          LLVM_LINK: "/c/Program Files/LLVM/bin/llvm-link"
          LLVM_AS: "/c/Program Files/LLVM/bin/llvm-as"
          CLANG: "/c/Program Files/LLVM/bin/clang"

      - shell: bash
        name: Test crux-llvm (Windows)
        run: .github/ci.sh test crux-llvm
        if: runner.os == 'Windows'
        env:
          LLVM_LINK: "/c/Program Files/LLVM/bin/llvm-link"
          CLANG: "/c/Program Files/LLVM/bin/clang"

      - shell: bash
        name: Test uc-crux-llvm (Windows)
        run: .github/ci.sh test uc-crux-llvm
        if: runner.os == 'Windows'
        env:
          LLVM_LINK: "/c/Program Files/LLVM/bin/llvm-link"
          CLANG: "/c/Program Files/LLVM/bin/clang"

      - shell: bash
        run: .github/ci.sh build exe:crux-llvm-svcomp
        if: runner.os != 'Windows'

      - shell: bash
        run: .github/ci.sh bundle_crux_llvm_files
        if: github.repository == 'GaloisInc/crucible'
        env:
          OS_TAG: ${{ matrix.os }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          VERSION: ${{ needs.outputs.outputs.crux-llvm-version }}

      - uses: actions/upload-artifact@v2
        if: github.repository == 'GaloisInc/crucible'
        with:
          path: crux-llvm-*.tar.gz*
          name: crux-llvm-${{ matrix.os }}-${{ matrix.ghc }}
